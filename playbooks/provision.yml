- name: hotel booking playbook to provision the application
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    openshift_user: 
    openshift_password: 
    openshift_token:
    openshift_master_url: 
    openshift_user_password:
    project_monolith: "hotel-booking-monolith"
    project_virtual_layer: "hotel-booking-virtual-layer"
    project_booking_state: "hotel-booking-state"
    project_customer: "hotel-booking-customer"
    project_inventory: "hotel-booking-inventory"
    project_reservation: "hotel-booking-reservation"
    project_web_app: "hotel-booking-web-app"


  tasks:    
    - name: login as super user with token
      shell: "oc login --token={{ openshift_token }} --insecure-skip-tls-verify=true"
      when:
        - openshift_token is defined
        - openshift_token is not none
        - openshift_token|trim() != ""
      tags: always

    - name: login as super user with pwd
      shell: "oc login -u {{ openshift_user }} -p {{ openshift_password }} --insecure-skip-tls-verify=true"
      when: >
        openshift_token is not defined or
        openshift_token is none or
        openshift_token|trim() == ""
      tags: always
    - name: Check if "{{ project_monolith }}" project existed
      shell: oc project {{ project_monolith }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Monolith Database
      block:
        - name: Create Project/Namespace
          shell: "oc new-project {{ project_monolith }} \
            --display-name='Hotel Booking Monolith' \
            --description='Hotel Booking Demo'"
        - name: Provision PostgreSQL persistent
          shell: "oc new-app postgresql-persistent \
            -p DATABASE_SERVICE_NAME=monolith-postgresql \
            -p POSTGRESQL_DATABASE=monolithdb \
            -p POSTGRESQL_USER=postgresql \
            -p POSTGRESQL_PASSWORD=postgresql \
            --labels=app=monolith"
        - name: Waiting for the Database to be up and running (120s)
          pause:
            minutes: 2
        - name: Initialize Database
          block:
            - name: Copy init SQL script into the pod
              shell: "oc rsync sql/ $(oc get pods -lapp=monolith -o name):/opt/app-root/src/ddl"
              args:
                chdir: ../hotel-booking-monolithdb/
              register: pod_ready
              until: pod_ready.rc == 0
              delay: 60
              retries: 3
            - name: Initialize Database
              shell: "oc rsh $(oc get pods -lapp=monolith -o name) \ 
                bash -c 'psql $POSTGRESQL_DATABASE $POSTGRESQL_USER -f ddl/hotel-booking.ddl'"
      when: >
        project_already_existed.rc == 1
    - name: Check if "{{ project_booking_state }}" project existed
      shell: oc project {{ project_booking_state }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Booking State Service
      block:
        - name: Create Project/Namespace
          shell: "oc new-project {{ project_booking_state }} \
            --display-name='Hotel Booking State' \
            --description='Hotel Booking Demo'"
        - name: Setup Policy
          shell: oc policy add-role-to-user view -z default -n {{ project_booking_state }}
        - name: Install Infinispan
          shell: "oc create -f https://raw.githubusercontent.com/infinispan/infinispan-openshift-templates/master/infinispan-ephemeral.yaml"
        - name: Provision Infinispan
          shell: "oc new-app infinispan-ephemeral \
            -p APPLICATION_NAME=sharedcache \
            --labels=app=booking-state-service"
        - name: Deploy Microservice
          shell: "mvn clean fabric8:deploy -Popenshift -DskipTests"
          args:
            chdir: ../hotel-booking-microservice/booking-state-service/
      when: >
        project_already_existed.rc == 1      
      tags: always
    - name: Check if "{{ project_customer }}" project existed
      shell: oc project {{ project_customer }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Customer Service
      block:
        - name: Create {{ project_customer }} Project/Namespace
          shell: "oc new-project {{ project_customer }} \
            --display-name='Hotel Booking Customer' \
            --description='Hotel Booking Demo'"
        - name: Setup Policy
          shell: oc policy add-role-to-user view -n {{ project_customer }} -z default
        - name: Deploy Customer Microservice
          shell: "mvn clean fabric8:deploy -Popenshift -DskipTests -Dfabric8.namespace=`oc project -q`"
          args:
            chdir: ../hotel-booking-microservice/customer-service/
      when: >
        project_already_existed.rc == 1      
      tags: always
    - name: Check if "{{ project_inventory }}" project existed
      shell: oc project {{ project_inventory }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Inventory Service
      block:
        - name: Create {{ project_inventory }} Project/Namespace
          shell: "oc new-project {{ project_inventory }} \
            --display-name='Hotel Booking Inventory' \
            --description='Hotel Booking Demo'"
        - name: Setup Policy
          shell: oc policy add-role-to-user view -n {{ project_inventory }} -z default
        - name: Deploy Inventory Microservice
          shell: "mvn clean fabric8:deploy -Popenshift -DskipTests -Dfabric8.namespace=`oc project -q`"
          args:
            chdir: ../hotel-booking-microservice/inventory-service/
      when: >
        project_already_existed.rc == 1      
      tags: always
    - name: Check if "{{ project_reservation }}" project existed
      shell: oc project {{ project_reservation }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Reservation Service
      block:
        - name: Create {{ project_reservation }} Project/Namespace
          shell: "oc new-project {{ project_reservation }} \
            --display-name='Hotel Booking Reservation' \
            --description='Hotel Booking Demo'"
        - name: Setup Policy
          shell: oc policy add-role-to-user view -n {{ project_reservation }} -z default
        - name: Deploy Reservation Microservice
          shell: "mvn clean fabric8:deploy -Popenshift -DskipTests -Dfabric8.namespace=`oc project -q`"
          args:
            chdir: ../hotel-booking-microservice/reservation-service/
      when: >
        project_already_existed.rc == 1      
      tags: always


    - name: Check if "{{ project_web_app }}" project existed
      shell: oc project {{ project_web_app }}
      register: project_already_existed
      ignore_errors: yes
    - name: Create Web App Service
      block:
        - name: Create Project/Namespace
          shell: "oc new-project {{ project_web_app }} \
            --display-name='Hotel Booking Web App' \
            --description='Hotel Booking Demo'"
        - name: Yarn Install
          shell: yarn install
          args:
            chdir: ../hotel-booking-web-app/
        - name: Deploy Microservice v1
          shell: yarn openshift
          args:
            chdir: ../hotel-booking-web-app/
      when: >
        project_already_existed.rc == 1
      tags: always